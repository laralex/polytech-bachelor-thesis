#+TITLE: Defence text (1700 words)
* Тема работы (15)
Тема выпускной работы. Pазработка модуля процедурной генерации трехмерных моделей зданий
Руководитель: Туральчук Константин Анатольевич

* Область, предмет исследования, цель работы (251)
На данный момент существуют области человеческой деятельности, например,
кинопроизводство, архитектура, разработка компьютерных игр или инженерное
проектирование, которые требуют создания большого числа трехмерных моделей.
Подготовкой трехмерных моделей нередко занимается человек, как правило
подготовленный специалист, и делает он это при помощи так называемых систем
автоматизированного проектирования (они же САПР).

Но также как и другие компьютеризированные процессы, этапы создания трехмерных
моделей могут быть автоматизированы. Одним из вариантов автоматизации является
процедурная генерация контента (сокращенно ПГК), а конкретнее процедурная
генерация трехмерных моделей, при которой используются специальные алгоритмы,
образующие геометрию модели по параметрам. Пользователю же далее необходимо
оценить качество модели, и если оно достаточное, то принять эту модель и
использовать ее на последующих этапах, а если качество недостаточное, то нужно
скорректировать параметры и повторить процесс.

Предметом исследования в данной работе является процедурная генерация трехмерных
моделей зданий. Актуальность работы связана с большими временными и вычислительными затратами процесса создания трехмерных моделей в индустрии.

Цель данной работы -- реализовать прототип модуля для процедурной генерации
трехмерных моделей зданий (а именно фасада) по заданным пользовательским
параметрам. В результате, за небольшой промежуток времени генерируется
трехмерная модель в виде файла распространенного графического формата. Прототип
должен быть архитектурно спроектирован на расширение в будущем (например,
расширение возможностей генератора или более интерактивный редактор параметров).

Для достижения данной цели, необходимо решить следующие
задачи:

+ рассмотреть актуальные подходы для процедурной генерации контента
и выбрать наиболее эффективные;
+ определить входные и выходные данные алгоритма процедурной генерации зданий;
+ спроектировать алгоритм процедурной генерации зданий;
+ реализовать алгоритм и сопутствующий программный модуль, в котором он может
исполняться;
+ проверить работоспособность и качество разработанного модуля, оценить
возможности его расширения.

* Методы генерации (418)
Рассмотрим распространенные методы для процедурной генерации контента:
** Формальные грамматики
С помощью данного метода строится абстрактный математический объект грамматика,
который описывает некоторую произвольную систему (в нашем случае это цифровой
контент). Грамматика состоит из символов алфавита (набора примитивных объектов,
из которых составляются слова), а также из правил получения одних слов из других
(грамматические правила). Грамматика начинается с определения аксиом – начальных
символов, к которым начинают применяться грамматические правила.

Целевое приложение решает задачу ПГК, присвоив каждому символу алфавита
некоторое 3D представление, тогда слово из этих символов - полученная
процедурная модель. Метод является хоть и ограниченным способом построения, но
также в достаточной мере он гибок и отражает конструкции реального мира, из-за
чего он применим в том числе для процедурно генерируемых моделей зданий, где
каждому абстрактному символу ассоциируется параметризованная форма модели (окно,
элемент крыши, часть стен и т. п.)
** Генерация с применением известных функций или фракталов
Этот набор методов использует известные математические функции, комбинации
которых при визуализации напоминают объекты реального мира. Генерирующая функция
может определять, например, положение точек модели в пространстве, цвет или
интенсивность эффекта в зависимости от положения и момента времени и т. п. В
зависимости от природы функции, можно получать бесконечные (или достаточно
большие) сгенерированные объекты.

Классическими примерами таких функций являются:
+ диаграмма Вороного, которая
для случайных точек в пространстве выглядит как случайная мозаика (диаграмму
применяют для генерации текстур минералов, древесной коры);
+ шум Перлина,
который позволяет симулировать случайные колебания значений, например, перепад
высоты ландшафта;
+ разреженный свёрточный шум, позволяет генерировать
«волновые» явления, например, текстуры волос, древесины, песка и др.

Смежным направлением той же идеи являются фракталы – множества точек, которые
имеют самоподобную (рекурсивную) топологию. Они могут использоваться для
создания псевдо-трехмерных изображений, а также при процедурной генерации
растительности  и эффектов коррозии.
** Методы машинного обучения
Данный набор технологий имеет множество форм воплощения во многих
оптимизационных задачах программирования. В том числе, они позволяют решать
задачи ПГК: используя обучение с учителем, по реальным GIS данным можно строить
правдоподобные разметки карт городов, по фотографиям предметов можно
генерировать процедурные текстуры и трехмерные модели, по нескольким
записям голоса можно синтезировать процедурную речь с этим голосом и пр.

Обучение без учителя очень сложно целиком воплотить в процедурной генерации
трехмерных объектов, т.к. трудно определить функционал, который модель машинного
обучения должна оптимизировать для генерации правдоподобного, и в тоже время
случайного объекта. Тем не менее, ему можно найти применение при процедурной
генерации моделей зданий по образцу или в решении небольшой подзадачи генерации,
например поиск пространственного положения какой-то детали, или генерация
наброска сгенерированного объекта. Так например, реализован прототип системы,
который по двумерному наброску формирует элемент здания, например, крышу,
пристройку, окно (тип элемента распознается автоматически).

* Существующие решения
Большинство существующих решений для процедурной генерации зданий представляют
из себя плагины для систем автоматизированного проектирования. С одной стороны
плагины удобно интегрированы в работу художника компьютерной графики, но с
другой они жестко привязаны к конкретной САПР, а из-за наличия огромного
количества их на рынке, найти качественный плагин под определенную САПР может не
предтавляться возможным. Примерами популярных плагинов можно назвать SceneCity
для Blender, Fast Architecture для Autodesk 3ds Max, Maya Structures для Autodesk
Maya.

Также, игровой движок Unreal Engine является одной из немногих
многофункциональных систем со встроенным модулем для генерации именно моделей
зданий, по названием Procedural Buildings

Существуют и самостоятельные продукты, которые предоставляют графический
интерфейс и функционал, занимающиеся конкретно процедурной генерацией 3D моделей
зданий (однако в большей степени они нацеленны на процедурную генерацю городов).
Примерами этих систем являются Esri CityEngine и GameSim Procedural Modeling

Все эти решения занимают свою нишу, они отличаются по возможностям экспорта
моделей, сложности настройки и по возможности генерации дополнительных данных
модели (текстур, моделей пониженной детальности и прочего). Универсального
решения среди популярных систем нет.

* Алгоритм генерации
Далее перейдем к разработанному в работе алгоритму генерации.

Трехмерную модель математически можно рассматривать как точку многомерного
пространства, где каждое измерение определяет значения непрерывных параметров
(высота, размеры деталей). В таком случае,
процедурная генерация 3D модели – это выбор произвольной точки в этом
пространстве.

Цель генерации – найти такую точку пространства, которая удовлетворила
бы пользователя. Сойтись к этой точке можно несколькими способами, например,
можно сгенерировать начальную модель (первое приближение), а затем учитывая
пожелания пользователя, продвигать это приближение в сторону желаемой точки.
Данный способ удобен только для небольших пространств параметров, потому что
иначе продвижение может потребовать неразумно большое число шагов.

Альтернативно, можно постепенно сокращать пространство параметров, до тех пор,
пока любая точка из подпространства не будет подходящей пользователю.
Недостатком такого подхода является то, что на каждом этапе подпространство
параметров связное, поэтому оно может быть иногда слишком большим, а иногда
слишком ограниченным – не покрывающим нескольких участков подпространства,
которые бы также устроили пользователя. Тем не менее, сокращение подпространства
является наиболее интуитивным с точки зрения пользователя, очередной результат
генерации является более предсказуемым. Скорость и качество сходимости напрямую
зависит от того, как пользователь сужает подпространство параметров. Поэтому
важно в разрабатываемом алгоритме иметь параметры генерации, эффект и значение
которых очевидно для пользователя, позволяя ему сужать подпространство быстрее.

За теоретическую основу алгоритма генерации зданий в работе был принят метод
формальных грамматик, т. к. это наиболее стабильный метод процедурной генерации
контента, особенно вписывающийся в генерацию объектов, обладающих элементами
симметрии (генерирующие функции в то же время пригодны для создания фактически
бесконечных процедурных объектов с простой структурой, а методам машинного
обучения необходимы нетривиальные источники размеченных данных, которые будет
сложно получить для данной работы).

Классическая формальная грамматика задается как кортеж из четырех
множеств G = (N, Σ, R, S), где
- N :: множество нетерминальных символов (таких
символов, которые на следующих шагах могут быть заменены на другие)
- Σ :: множество терминальных символов (не могут быть заменены)
- R :: множество грамматических правил, которые являются следующим отображением,
(т. е. правила используют хотя бы один из нетерминальных символов, сводя его к
произвольному набору символов)
- S :: множество начальных символов

Удобнее будет использовать уже рассмотренный в научных трудах частный случай
формальных грамматик, называемый split-грамматикой, для которой грамматическими
символами являются геометрические фигуры, а среди грамматических правил
определены правило разделения и правило преобразования.

По правилу разделения, некоторый символ может быть разделен на несколько таких же
символов. По правилу преобразования, некоторый символ может быть заменет
полностью другим символом.

...
** Реализация алгоритма

* Модуль генерации
** Требования к модулю генерации
Разработанный модуль должен процедурно генерировать трехмерные модели зданий,
т.е. формировать полигональную сетку (меш) здания, являющийся набором точек и
геометрических примитивов.

Генерация происходит по заданным параметрам с элементами случайности (т.е.
некоторые параметры варьируются случайно в некотором диапазоне). Пользователь
имеет возможность настраивать численные характеристики, например, высота, или
геометрические, например, форма основания. Небольшое изменение параметров ведет
к предсказуемым изменениям в новой модели. Генерация должна занимать разумное
время, допустимая задержка – 5 секунд с начала запуска алгоритма для генерации
здания типичной композиции, т.е. несколько десятков этажей, порядка десятка
стен. Система не должна генерировать абсолютно случайные и сюрреалистичные
модели (если только это не то, чего хочет пользователь, вводя соответствующие
параметры). Одну и ту же модель можно получить еще раз, при вводе одинаковых
параметров и такой же инициализации системы.

Разработанный модуль должен иметь графический интерфейс, в котором пользователь
вводит параметры и управляет запуском алгоритма. Модель здания можно сохранить в некотором распространенном цифровом формате файла (например, OBJ или
STL). В рамках данной работы целевая платформа модуля – OS Windows, но модуль
должен быть архитектурно спроектирован так, чтобы обеспечить удобство
встраивания его в другое приложение. Также, в силу того, что разнообразие
процедурной генерации достигается вариативностью базовых компонентов генерации
(в нашем случае, например – окон в разных стилях), необходимо поддерживать
возможное будущее расширение генерации новыми компонентами.
** Архитектура модуля
** Реализация модуля
Для реализации алгоритма генерации и модуля был выбран язык программирования C#,
т.к. он включает огромное количество развитых библиотек, и т.к. модуль не
является критичным к производительности приложением. Для минимизации ошибок и
упрощения разработки, сборка трехмерной модели осуществляется с помощью
библиотеки geometry3sharp, а визуализация с помощью библиотеки Helix Toolkit.
Пользовательский интерфейс реализован с помощью встроенного модуля WPF, а
передача данных по HTTP с помощью модуля WCF.
** Использование модуля
В текущей реализации модуля, пользователь запускает оконный интерфейс с
параметрами генерации (вида, как показано на рис.П3.1), устанавливает численные
параметры, по желанию изменяет форму основания здания, выбирает конкретные
модели окон и дверей. Без учета времени обучения работе с программой (что
нестрого можно оценить как 5-10 минут), время настройки генерации занимает до 2
минут времени. Пользователь запускает генерацию нажатием на специальную кнопку и
по завершении этого процесса позволяется экспортировать полученную модель в
файл. Просмотреть модель можно при наличии запущенного приложения для
визуализации, реализованного в данной работе. Справедливо полагая, что первая
сгенерированная модель не будет иметь подходящий вид для пользователя, ему
потребуется скорректировать параметры здания, сужая диапазоны параметров, и
затем сгенерировать новую модель. Время каждой новой попытки генерации может
также занимать до 1-2 минуты, хотя возможно и гораздо быстрее при приближении к
желаемому результату.

Суммарное время генерации одной модели можно нестрого оценить как «до 10 минут».
Такой темп работы (который субъективно может быть гораздо выше) позволяет
генерировать порядка 20-30 моделей зданий за рабочий день графического дизайнера
с учетом встраивания их в целевое приложение, что является хорошим показателем
относительно ручного создания модели в САПР.
* Примеры генерации
Низкие здания, многоэтажные здания различной формы, небоскребы
* Численное тестирование
Для численной оченки модуля рассматривается время генерации, время передачи
модели по HTTP клиентам модуля, а также число треугольников сгенерированной
модели, т. к. они являются наиболее важными при работе с модулем и их значение
можно определить точно. Для тестирования будем изменять те параметры, которые
наиболее сильно влияют на размер модели на диске:
- количество окон на модели :: т. к. каждая исходная модель окна или двери имеет
  несколько десятков тысяч треугольников, а составные части стен все вместе
  требуют лишь порядка сотни треугольников, что при условии, что окон в модели
  много, делает генерируемую модель почти полностью состоящую из данных конфигурации окон;
- лимит треугольников у моделей деталей :: т. к. это единственный параметр,
  который значительно позволяет уменьшить размер данных модели, что связано с
  тем, что исходные модели окон имеют множество избыточных треугольников,
  которое зачастую можно уменьшить без значительной потери качества.

Из таблицы таблицы видно, что соблюдается поставленное, что время генерации
модели не более 5 секунд для большинства зданий, подобных натуральным (для
сравнения 30-ти этажное жилое здание с несколькими подъездами имеет до 2000
окон). Разумеется, модели бoльшего размера требуют сколь угодно много места на
диске и времени на генерацию. Можно заметить, что время передачи модели HTTP
клиентам в несколько раз больше времени генерации, что связано с накладными
расходами передаче множества пакетов через весь стек протоколов TCP/IP. В
случае, если критически важным является сокращение задержки (например при
создании городов в реальном времени), рекомендуется использовать модуль
генерации как библиотеку C#, чтобы не было необходимости передачи модели вовсе.
* Сравнение с аналогами
Проведем сравнение разработанного модуля генерации моделей зданий
с некоторыми ранее рассмотренными существующими решениями из табл.1.1.
Модуль является отдельным ПО, допускает реализацию с произвольным пользовательским интерфейсом (в текущей реализации оконным). Модуль направлен
на процедурную генерацию моделей зданий. Параметры зданий просты и имеют
привязку именно к композиционным элементам зданий (высота в метрах, количество этажей и т. п.), исключая необходимость настройки формальной грамматики,
которая лежит в основе генерации. Модуль поддерживает экспорт сгенерированных
моделей в файлы форматов OBJ и STL (и т. к. архитектура модуля позволяет
добавлять новые варианты экспорта, то могут быть реализованы и другие форма50
ты). Важным отличием при этом является возможность передавать генерируемые
модели другому процессу через протокол HTTP (в том числе удаленно, по Интернету). Модуль не поддерживает генерацию развертки текстур и самих текстур для
моделей, но данный функционал может быть добавлен в будущем, т. к. библиотека
geometry3sharp, которая реализует генерацию моделей, уже позволяет хранение
этой информации в моделях, утилиты экспорта при этом изменения не потребуют.
* Заключение
По итогу в работе удовлетворены все поставленные требования. Время генерации в
нормальной работе не превышает установленных лимитов, генерация происходит со
случайными элементами с понятными для пользователя параметрами. Архитектура
модуля позволяет расширение в будущем, как расширение генерации зданий, так и
расширение функционала модуля. Отдельные части модуля могут быть
переиспользованы в виде библиотек языка C#. Выгодным отличием генерации зданий
от многих существующих систем является настройка формы основания, в том числе
позволяющая образовать невыпуклый многоугольник. Пользователь может
использовать полученные модели с помощью экспорта в файл или получения моделей
по HTTP в другом целевом приложении.

В текущем виде, модуль генерации имеет возможность
занять свою нишу среди существующих программных решений в области процедурной генерации моделей зданий (и генерации городов как смежной области). При
генерации пользователю рекомендуется ограничивать количество треугольников
для моделей деталей (окон, дверей и пр.) для уменьшения времени генерации и
уменьшения размера модели на физическом носителе.

Описанная и принятая в данной работе математическую модель -- дополненная
формальная split–грамматика, со стороны реализации не проводит различия между
геометрическими и абстрактными символами (оба типа являются похожими классами
языка C#, а абстрактность выражается в отсутствии кода по изменению генерируемой
модели). Из-за этого факт расширения математической модели в данной работе
необходимо принять как незначительный и незначимый по отношению к существующим
научным трудам по теме. Однако подтвердилось, что split-грамматика является
удачным методом для процедурной генерации трехмерных моделей.

В будущем, реализованный проект может быть доработан и расширен, в
частности могут быть реализованы другие типы генерации процедурного контента
(генерация текстур, разверток текстур, LOD моделей или другого типа трехмерных
моделей), в том числе они могут использовать другие математические подходы к
генерации, рассмотренные в параграфе 1.2, например, подходы машинного обучения для генерации случайной формы основания зданий, чтобы совместить реализм
моделей зданий с большей автоматизацией генерации. Могут быть разработаны
дополнительные виды экспорта в форматы моделей для популярных САПР, или
передача модели по сети, возможно расширение функционала текущего генератора трехмерных моделей зданий: новые опции в интерфейсе генерации, новые
типы элементов зданий (лестницы, балконы, карнизы и т. п.). Отдельно от модуля
генерации могут быть реализованы альтернативные HTTP клиенты, принимающие
сгенерированные модели: плагины для САПР (для интеграции моделей в работы
художников), приложения для симуляции городов, и пр.

Таким образом, удалось решить следующие задачи:
– были рассмотрены разнообразные теоретические методы (формальные
грамматики, методы машинного обучения, генерирующие функции), а
также программные продукты, имеющие полноценные или утилитарные
возможности процедурной генерации контента;
– на основе способов применения процедурной генерации для решения задач
пользователя, был сформирован оптимальный способ ввода параметров
генерации и вывода готовой модели;
– была рассмотрена математическая модель, которую уже применяли для
генерации моделей зданий [21], в рамках данной работы она была несколько
дополнена, но это не дало заметного результата;53
– был реализован алгоритм генерации, программный модуль генерации и
программа визуализации сгенерированных моделей;
– разработанные программы были опробованы и протестированы с точки
зрения функционала и архитектуры.
По факту успешного решения поставленных задач, цель выпускной квалификационной работы может считаться достигнутой.

#+TITLE: Defence text (1700 words)
* [#C] Тема работы (15)
Добрый день
Тема выпускной работы: Pазработка модуля процедурной генерации трехмерных
моделей зданий
Руководитель: Туральчук Константин Анатольевич

* [#C] Область, предмет исследования, цель работы (176) <up to 01:50>
Разные области человеческой деятельности, например, кинопроизводство, инженерное
проектирование, часто требуют создания =трехмерных= =моделей=. Подготовкой
трехмерных моделей обычно занимается человек-специалист, и делает он это при
помощи так называемых систем автоматизированного проектирования (они же САПР),
подготовка одной модели может занимать до нескольких дней.

Однако, этапы создания 3D моделей могут быть автоматизированы. И одним
из вариантов является процедурная генерация контента (сокращенно ПГК), при
которой используются специальные алгоритмы, создающие геометрию 3D модели по
параметрам. Пользователь должен устанавливать параметры и
корректировать их, пока сгенерированная модель не будет достаточного качества.

Цель данной работы -- реализовать прототип модуля для процедурной генерации
трехмерных моделей ЗДАНИЙ (а именно фасада) по заданным пользовательским
параметрам. Модуль должен за небольшой промежуток времени генерировать модель в
виде файла распространенного графического формата. Прототип должен быть
архитектурно спроектирован на расширение в будущем.

Для достижения данной цели, необходимо решить следующие
задачи:

+ рассмотреть актуальные подходы для процедурной генерации контента;
+ определить входные и выходные данные алгоритма процедурной генерации зданий;
+ спроектировать алгоритм генерации;
+ реализовать алгоритм и сопутствующий программный модуль;
+ проверить работоспособность и качество модуля, оценить возможности его
  расширения.

* [#c] Методы генерации (349) <up to 5:00>
Рассмотрим актуальные методы для процедурной генерации контента:
** Генерация с применением известных функций или фракталов
Иногда для генерации используюся известные математические функции, комбинации
которых внешне напоминают объекты реального мира. Эти функции могут
определять, например, положение точек модели в пространстве.

Примерами таких функций являются: [LINKS]
+ шум Перлина, для симуляции гладких случайных изменений, например, перепад
высоты ландшафта;
+ а также фракталы, используемые для создания
псевдо-трехмерных изображений, а также при процедурной генерации растительности.

** Методы машинного обучения
Методы машинного обучения, позволяют решать лишь некоторые задачи ПГК, например,
используя обучение с учителем, по реальным геолокационным данным можно строить
правдоподобные разметки карт городов, по фотографиям предметов можно
генерировать процедурные трехмерные модели. Обучение без
учителя очень сложно целиком воплотить в процедурной генерации трехмерных
объектов, т.к. трудно определить функционал, который модель машинного обучения
должна оптимизировать.

В научных трудах исследовалось, например, создание полноценной трехмерной модели
из всего одной фотографии реального здания (при этом максимально реалистично
воспроизводится только показанная на фотографии сторона).

** Формальные грамматики
В методе формальных грамматик строится абстрактный математический объект,
называемый грамматикой.

Грамматика состоит из символов алфавита (набора примитивных объектов, из которых
составляются слова), а также из грамматических правил получения одних слов из
других. Грамматика также включает аксиомы – т.е. начальные символы, к которым
начинают применяться грамматические правила.

Для генерации, каждому символу алфавита присваивается некоторое трехмерное
представление (окно, элемент крыши, часть стены и т.п.). Метод является с одной
стороны ограниченным конкрентными грамматическими правилами, но также он гибок в
содержании этих правил.

Грамматики нашли большое применение в процедурной генерации контента,
и были исследованы их расширения, например L-системы для генерации карт городов,
shape-грамматики для интерьера здания, split-грамматики для фасадов зданий.

** Сплит-грамматика
Собственно будучи исследованной для генерации фасадов, split-грамматика является
наиболее подходящей основой для данной работы. Символами этой грамматики
являются трехмерные геометрические объекты, а грамматические правила, помимо
прочих, содержат правила разделения и правило преобразования.

По правилу разделения, некоторый символ может быть разделен на несколько таких
же символов. По правилу преобразования, некоторый символ может быть заменен
полностью другим символом. 

* [#C] Существующие решения (118) <up to 5:00>
Существующие решения для генерации моделей зданий зачастую являются плагинами
для систем автоматизированного проектирования. Они удобно интегрированы в работу
художника компьютерной графики, но с другой стороны они жестко привязаны к конкретной
САПР, поэтому найти качественный плагин под определенную САПР может не
предтавляться возможным.

Существуют и самостоятельные продукты, которые предоставляют функционал для
конкретно процедурной генерацией 3D моделей зданий (однако в большей степени они
нацеленны на процедурную генерацию ГОРОДОВ).

Названия конкретных систем приведено на слайде. Все эти решения занимают свою
нишу, они отличаются по возможностям экспорта моделей, сложности настройки и по
возможности генерации дополнительных данных модели. Универсального решения среди
популярных систем нет. В частности из этого вытекает актуальность исследования в
данной области.

* [#C] Входные данные алгоритма (179) <up to 6:40>
Перед проектированием алгоритма генерации необходимо определится, в каком виде
будут представлены входные и выходные данные алгоритма.

Представим трехмерную модель как точку многомерного
пространства, где каждое измерение этого пространства определяет значения
параметров (например, высота здания, ширина окна).

Цель генерации – найти такую точку пространства, которая удовлетворила бы
пользователя. Сойтись к этой точке можно, например, сгенерировав начальную
модель, а затем учитывая пожелания пользователя, продвигать это приближение в
сторону желаемой точки. Cпособ удобен для небольших пространств параметров,
а иначе продвижение может потребовать слишком большое число шагов.

Альтернативно можно постепенно сокращать подпространство параметров, пока любая точка
из подпространства не будет подходящей. Если сделать каждый параметр
пространства понятным человеку, то данный подход будет наиболее
интуитивным. Например пользователь интуитивно понимает, за что отвечает параметр
высоты здания, и ему остается указать желаемый диапазон значений.

Таким образом, входными параметрами алгоритма имеет смысл сделать набор
диапазонов значений для параметров здания, а также форму основания, для
обеспечения гибкости генерации.

В индустрии компьютерной графики принято несколько стандартизированных форматов
для трехмерных моделей, поэтому чтобы полученные модели можно было
использовать, они должны быть в одном из этих форматов (например, OBJ или STL).

* [#C] Алгоритм генерации (253)
За основу алгоритма генерации зданий был принят метод формальных грамматик, т.
к. это наиболее стабильный метод ПГК, подходящий для объектов с симметрией, как
здания. В то же время, генерирующие функции пригодны больше для создания
объектов с простой структурой, а методам машинного обучения необходимы
нетривиальные источники размеченных данных, которые будет сложно получить для
данной работы.

Как упоминалось, имеет смысл взять за основу исследованную split-грамматику. Для
целей данной работы также попробуем ее преобразовать. Добавим к множеству
геометрических символов множество абстрактных символов - т.е. таких, у которых
нет визуального представления, и которые соответственно не могут подвергаться
правилу разделения. Эти символы выступают как метки и позволяют создать,
например, симметрию в дверях и окнах.

Множество грамматических символов и грамматических правил будет определено
заранее. Но детали правил этих правил будут определяться из пользовательского
ввода (например, сколько конкретно этажей будет сгенерировано). Таким образом
процесс генерации может быть настроен, при этом оставаясь детерминированым.

Во время генерации, для каждой части грамматического слова проводится поиск
грамматического правила с подходящей посылкой. Эта часть заменяется на следствие
грамматического правила. Применение правил происходит рекурсивно, пока
существуют подходящие правила. Для предотвращения бесконечной рекурсии вводится
ограничение на глубину рекурсии.

Полученное грамматическое слово является просто множеством символов, но не
является трехмерной моделью. Но так как мы определили, что все символы являются
либо геометрическими, либо абстрактными, то геометрические символы мы
визуализируем по параметрам, определенным в символе (например, координаты,
ориентация).

* [#C] Модуль генерации - требования и технологии (202)
** Требования к модулю генерации
Разрабатываемый модуль должен процедурно генерировать трехмерные модели зданий,
т.е. формировать полигональную сетку здания.

Генерация происходит по заданным параметрам с элементами случайности.Генерация
должна занимать разумное время, допустимая задержка – 5 секунд для генерации
типичных зданий, т.е. несколько десятков этажей, порядка десятка стен.

Модуль должен иметь графический интерфейс для ввода параметров и
управления запуском алгоритма. Модель здания можно сохранить в
стандартизированном формате файла.

Модуль должен быть архитектурно спроектирован так, чтобы обеспечить удобство
встраивания его в другое приложение.
** Технологии
Для реализации алгоритма генерации и модуля был выбран язык программирования C#,
т.к. он включает огромное количество развитых библиотек, и т.к. работа модуля не
является критичной к производительности. Для минимизации ошибок и упрощения
разработки, сборка трехмерной модели осуществляется с помощью библиотеки
geometry3sharp, а визуализация с помощью библиотеки Helix Toolkit.
Пользовательский интерфейс реализован с помощью встроенного модуля WPF, а
передача данных между процессами с помощью модуля WCF.
* [#C] Модуль генерации -- шаблон (95)
В соответствии с требованиями к модулю генерации, он должен иметь графический
интерфейс, но также поддерживать расширение в будущем, в том числе реализацию
другого типа интерфейса.

Наиболее подходящим архитектурным шаблоном для этого является
Модель-Представление-Контроллер (он же MVC), который по сравнению с
клиент-серверной архитектурой не делает жесткой зависимости между логикой
генерации и интерфейсом, а по сравнению с послойной архитектурой не добавляет
слишком много промежуточных подсистем и дублирования программного кода. К тому
же можно задействовать механизм связывания из языка С# и разрабатывать систему
по частному случаю шаблона MVC, который называется
Модель-Представление-ПредставлениеМодель (он же MVVM).
* Модуль генерации -- высокоуровневая архитектура (203)
В соответствии с шаблоном, система разделена на модель с изолированной логикой
генерации зданий, на представление с пользовательским интерфейсом без дополнительной
логики, и на контроллер, управляющий взаимодействием модели с представлением.

Соответвенно реализация модуля в точности соответствует выбранной
высокоуровневой архитектуре. Отдельные подсистемы реализованы отдельными
классами языка С#, которые используются не напрямую, а по интерфейсу, поэтому
подсистемы можно расширять, добавляя другие классы, реализующие эти интерфейсы.

Дополнительно было решено добавить возможность передавать сгенерированные модели
через протокол HTTP, учитывая, что множество компьютерных устройств и языков
программирования поддерживают этот протокол, разработанный модуль может быть
встроен в практически любое пользовательское приложение. Альтернативно, логика
генерации может выступать как подключаемая библиотека языка C\#.

В реализации алгоритма генерации каждый грамматический символ представляется
отдельным параметризованным классом языка C#. Объекты этих классов формируют
древовидную структуру. Каждое грамматическое правило также представляется
отдельным классом, имеющим метод по воздействию на эту древовидную структуру
(соответственно добавляя новые символы, развибая их или полностью заменяя). В
таком случае, для визуализации трехмерной модели из слова, производится
рекурсивный обход дерева, и каждый символ либо визуализируется (если он
геометрический), либо нет (если от абстрактный). Таким образом, в реализации C#
геометрические и абстрактные символы не сильно отличаются (оба являются просто
классами), а по этому дополнительной гибкости, по сравнению с исследованной
split-грамматикой достигнуть не удалось.
* [#C] Интерфейс систем и реализация алгоритма (30)
На данном слайде можно увидеть реализованный графический интерфейс для настройки
параметров зданий, а также пример интерфейса HTTP клиента, который может быть реализован.
Здесь это отдельное приложение для визуализации сгенерированных моделей.
* [#C] Примеры генерации (19)
На данном слайде можно увидеть еще несколько примеров сгенерированных моделей.
Могут юыть сгенерированы как низкие, так и высотные здания
* [#C] Численное тестирование (195)
Проводя системное тестирование для генерации моделей зданий, оценим время
генерации, время передачи модели по HTTP клиентам модуля, а также число
треугольников сгенерированной модели, т. к. эти параметры являются наиболее важными при
работе с модулем и их значение можно определить точно. Для тестирования будем
изменять те параметры зданий, которые наиболее сильно влияют на размер модели на диске:
- количество окон на модели :: т. к. именно расположение моделей окон состаляет
  большую часть данных моделей зданий
- лимит треугольников у моделей деталей :: т. к. это единственный параметр,
  который значительно позволяет уменьшить размер данных у окон

Из таблицы таблицы видно, что требование в 5 секунд для генерации типичных
зданий выполняется (для сравнения 30-ти этажное жилое здание с несколькими
подъездами имеет до 2000 окон). Разумеется, модели бoльшего размера требуют
сколь угодно много места на диске и времени на генерацию.

Видно, что время передачи модели HTTP клиентам в несколько раз больше времени
генерации, что связано с накладными расходами для передачи множества пакетов через
весь стек протоколов TCP/IP. В случае, если критически важным является
сокращение задержки (например при создании городов в реальном времени),
рекомендуется использовать модуль генерации как библиотеку C#, чтобы не было
необходимости передачи модели вовсе.
* [X] Тестирование гибкости архитектуры
* [#C] Выводы и результаты (183)
По итогу в работе удовлетворены все поставленные требования. Время генерации для
типичных зданий не превышает установленных лимитов.

Архитектура модуля позволяет расширение в будущем, как расширение генерации
зданий, так и расширение функционала модуля. Отдельные части модуля могут быть
переиспользованы в виде библиотек языка C#. Выгодным отличием генерации зданий
от многих существующих систем является настройка формы основания, в том числе
позволяющая образовать невыпуклый многоугольник. Пользователь может использовать
полученные модели с помощью экспорта в файл или получения моделей по HTTP в
другом целевом приложении.

В текущем виде, модуль генерации имеет возможность занять свою нишу среди
существующих программных решений в области процедурной генерации моделей зданий.

Описанная и принятая в данной работе математическую модель -- дополненная
split–грамматика, со стороны реализации не проводит различия между
геометрическими и абстрактными символами (оба типа являются похожими классами
языка C#). Из-за этого факт расширения математической модели в данной работе
необходимо принять как незначительный и незначимый по отношению к существующим
научным трудам по теме. Однако подтвердилось, что split-грамматика является
удачным методом для процедурной генерации трехмерных моделей.

* [#C] Заключение (131)
Таким образом, удалось решить поставленные задачи по:
+ рассмотрению актульных методов ПГК
+ определению способа ввода параметров генерации и вывода готовой модели
+ применению математической модели в алгоритме генерации, но расширение этой
  модели это не дало заметного результата
+ реализовации алгоритма генерации, программного модуля
генерации и программы визуализации сгенерированных моделей
+ тестирования модуля с точки зрения генерации зданий и
архитектуры системы.

По факту успешного решения поставленных задач, цель выпускной
квалификационной работы может считаться достигнутой.

В планируется расширение модуля, в частности могут быть реализованы другие типы
генерации процедурного контента, в том числе с другими упомянутыми
математические подходами, например, подходы машинного обучения для генерации
случайной формы основания зданий, чтобы совместить реализм моделей зданий с
большей автоматизацией генерации. Отдельно от модуля генерации могут быть
реализованы новые HTTP клиенты, принимающие сгенерированные модели, например
плагины для САПР (для интеграции моделей в работы художников)

* DONE Драфт
[BONUS]
Классическая Математически формальная грамматика задается четырмя множествами G = (N, Σ, R,
S), где
- N :: множество нетерминальных символов (т.е. таких
символов, которые на следующих шагах могут быть заменены на другие)
- Σ :: множество терминальных символов (эти символы не заменяются другими)
- R :: множество грамматических правил, которые являются следующим отображением [FORMULA]
(т. е. правила используют хотя бы один из нетерминальных символов, сводя его к
произвольному набору символов)
- S :: множество начальных символов

